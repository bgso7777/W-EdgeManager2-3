########################################################################################################################
# 로컬 개발
########################################################################################################################
# 서버 포트 (WAS에 8086~8090)
server.port=8087

# 실행 모드 runMode1-->dev,test,product,service    runMode2-->manager,transaver,log    runMode3-->>inswave,shinhanbankatop
runMode1=dev
runMode2=generator
runMode3=inswave

# 생성 로그 전송
log.generator.current.device.count=15
log.generator.instance.idx=1

log.generator.data.root.dirs=C:/work/W-EdgeManager/3.development/shinhanbankatop_log_20220828_5

# 로그 저장 요청 url
request.log.url.applicationerrorlog=http://192.168.79.100:8006/api/log/applicationerrorlog
request.log.url.clientactiveportlistresourcelog=http://192.168.79.100:8016/api/log/clientactiveportlistresourcelog
request.log.url.clienthwinforesourcelog=http://192.168.79.100:8015/api/log/clienthwinforesourcelog
request.log.url.clientmbrresourcelog=http://192.168.79.100:8011/api/log/clientmbrresourcelog
request.log.url.clientperformancelog=http://192.168.79.100:8007/api/log/clientperformancelog
request.log.url.clientprocesscreationlog=http://192.168.79.100:8018/api/log/clientprocesscreationlog
request.log.url.clientprogramlistresourcelog=http://192.168.79.100:8013/api/log/clientprogramlistresourcelog
request.log.url.clientresourcelog=http://192.168.79.100:8002/api/log/clientresourcelog
request.log.url.clientusertermmonitorlog=http://192.168.79.100:8017/api/log/clientusertermmonitorlog
request.log.url.integritylog=http://192.168.79.100:8009/api/log/integritylog
request.log.url.pconoffeventlog=http://192.168.79.100:8010/api/log/pconoffeventlog
request.log.url.serverresourcelog=http://172.31.3.88:8001/api/log/serverresourcelog
request.log.url.windowseventsystemerroralllog=http://192.168.79.100:8003/api/log/windowseventsystemerroralllog
request.log.url.hwerrorlog=http://192.168.79.100:8004/api/log/hwerrorlog
request.log.url.deviceerrorlog=http://192.168.79.100:8005/api/log/deviceerrorlog
request.log.url.windowsbluescreenlog=http://192.168.79.100:8008/api/log/windowsbluescreenlog
request.log.url.clientdefraganalysisresourcelog=http://192.168.79.100:8012/api/log/clientdefraganalysisresourcelog
request.log.url.clientwindowsupdatelistresourcelog=http://192.168.79.100:8014/api/log/clientwindowsupdatelistresourcelog
request.log.url.clientcontrolprocessresourcelog=http://192.168.79.100:8019/api/log/clientcontrolprocessresourcelog









# db Config에서 읽은 값 설정 시간 10분 마다
configInitialServiceSleepTime=600000

# 국가 설정
country=korea

# log level
logging.level.root=debug

# ???????
spring.main.allow-bean-definition-overriding=true

# elasticsearch
########################################################################################################################
elasticsearch.cluster_name=shinhanbankatop
elasticsearch.host=192.168.79.100
elasticsearch.port=9200

# master & data
elasticsearch.search.server=192.168.79.100:9200,192.168.79.100:9201
elasticsearch.data.server=192.168.79.100:9202,192.168.79.100:9203

# default index shards and replicas
index.number.of.shards=1
index.number.of.replicas=1

# proxy
proxy.elasticsearch.servlet_url=/elastic/*
proxy.elasticsearch.target_url=http://192.168.79.100:9200,http://192.168.79.100:9201

# elasticsearch data영역의 disk full로 인한 down 방지 목적 으로 97% 이상 디스크 시 가장 오래된 daily 인덱스를 삭제.(중요도가 낮고, 큰 사이즈의 index삭제)
is.run.serverresourcelog.observer=true
serverresourcelog.observer.capacity.elasticsearch.data.disk=50
serverresourcelog.observer.check.source.name=elasticsearchdata1
serverresourcelog.observer.delete.index.names=windowseventsystemerroralllogdaily,clientprocesscreationlogdaily,serverresourcelogdaily,


# kafka
########################################################################################################################
kafka.servers=192.168.79.100:9092,192.168.79.100:9093,192.168.79.100:9094,
kafka.curreny.count=0
kafka.max.poll.interval.ms=660000
kafka.max.poll.records=1
kafka.request.timeout.ms=600000
kafka.group.instance.id=logmanager_000

kafka.listener.applicationerrorlogsavelistener.enabled=false
kafka.listener.clientactiveportlistresourcelogsavelistener.enabled=false
kafka.listener.clientcontrolprocessresourcelogsavelistener.enabled=false
kafka.listener.clientdefraganalysisresourcelogsavelistener.enabled=false
kafka.listener.clienthwinforesourcelogsavelistener.enabled=false
kafka.listener.clientmbrresourcelogsavelistener.enabled=false
kafka.listener.clientperformancelogsavelistener.enabled=false
kafka.listener.clientprocesscreationlogsavelistener.enabled=false
kafka.listener.clientprocessresourcelogsavelistener.enabled=false
kafka.listener.clientprogramlistresourcelogsavelistener.enabled=false
kafka.listener.clientusertermmonitorloglistener.enabled=false
kafka.listener.clientwindowsupdatelistresourcelogsavelistener.enabled=false
kafka.listener.deviceerrorlogsavelistener.enabled=false
kafka.listener.hwerrorlogsavelistener.enabled=false
kafka.listener.integritylogsavelistener.enabled=false
kafka.listener.pconoffeventlogsavelistener.enabled=false
kafka.listener.serverresourcelogsavelistener.enabled=false
kafka.listener.windowsbluescreenlogsavelistener.enabled=false
kafka.listener.windowseventsystemerroralllogsavelistener.enabled=false

kafka.listener.applicationerrorlogrulelistener.enabled=false
kafka.listener.clientactiveportlistresourcelogrulelistener.enabled=false
kafka.listener.clientcontrolprocessresourcelogrulelistener.enabled=false
kafka.listener.clientdefraganalysisresourcelogrulelistener.enabled=false
kafka.listener.clienthwinforesourcelogrulelistener.enabled=false
kafka.listener.clientmbrresourcelogrulelistener.enabled=false
kafka.listener.clientperformancelogrulelistener.enabled=false
kafka.listener.clientprocesscreationlogrulelistener.enabled=false
kafka.listener.clientprocessresourcelogrulelistener.enabled=false
kafka.listener.clientprogramlistresourcelogrulelistener.enabled=false
kafka.listener.clientusertermmonitorlogrulelistener.enabled=false
kafka.listener.clientwindowsupdatelistresourcelogrulelistener.enabled=false
kafka.listener.deviceerrorlogrulelistener.enabled=false
kafka.listener.hwerrorlogrulelistener.enabled=false
kafka.listener.integritylogrulelistener.enabled=false
kafka.listener.pconoffeventlogrulelistener.enabled=false
kafka.listener.serverresourcelogrulelistener.enabled=false
kafka.listener.windowsbluescreenlogrulelistener.enabled=false
kafka.listener.windowseventsystemerroralllogrulelistener.enabled=false

# elasticsearch에서 윈도우이벤트 처리에 대한 부하로 idle ms을 설정함.
# 0 이상의 값은 kafka의 lag값 elasticsearch 부하 상황에 따라 달라짐.
kafka.windowseventsystemerroralllogsavelistener.idle.between.polls.ms=0
kafka.clientprocesscreationlogsavelistener.idle.between.polls.ms=0
kafka.clientprocesscreationlogsavelistener.max.idle.between.polls.ms=0
kafka.clientprocesscreationlogsavelistener.min.idle.between.polls.ms=0
kafka.clientprocesscreationlogsavelistener.decrese.idle.between.polls.ms=0


## javamelody 설정
########################################################################################################################
# Enable JavaMelody auto-configuration (optional, default: true)
javamelody.error.print=false
javamelody.enabled=false
# add spring boot enable
spring.autoconfigure.exclude=net.bull.javamelody.JavaMelodyAutoConfiguration
# Data source names to exclude from monitoring (optional, comma-separated)
javamelody.excluded-datasources=secretSource,topSecretSource
# Enable monitoring of Spring services and controllers (optional, default: true)
javamelody.spring-monitoring-enabled=true
# Initialization parameters for JavaMelody (optional)
# See: https://github.com/javamelody/javamelody/wiki/UserGuide#6-optional-parameters
#    log http requests:
javamelody.init-parameters.log=true
#    to exclude images, css, fonts and js urls from the monitoring:
# javamelody.init-parameters.url-exclude-pattern=(/webjars/.*|/css/.*|/images/.*|/fonts/.*|/js/.*)
#    to aggregate digits in http requests:
# javamelody.init-parameters.http-transform-pattern: \d+
#    to add basic auth:
# javamelody.init-parameters.authorized-users=admin:pwd
#    to change the default storage directory:
# javamelody.init-parameters.storage-directory=/tmp/javamelody
#    to change the default "/monitoring" path:
# javamelody.init-parameters.monitoring-path=/admin/performance
#management.server.port: 8081
management.endpoints.web.exposure.include=info,health,monitoring
javamelody.management-endpoint-monitoring-enabled=true


## websocket
########################################################################################################################

whub.container.bufferSize.max.text=1048576
whub.container.bufferSize.max.binary=1048576
whub.container.timeout.maxSessionIdle=43200000
whub.container.timeout.asyncSend=60000


## jpa 관련 설정
########################################################################################################################
spring.datasource.wedgemanager.jdbcUrl=jdbc:mysql://192.168.79.100:3306/WHUB?autoReconnect=true
spring.datasource.wedgemanager.username=whub
spring.datasource.wedgemanager.password=1eldptm))&$
spring.datasource.wedgemanager.driver-class-name=org.mariadb.jdbc.Driver
#spring.datasource.wedgemanager.jndi-name=jdbc/wedgemanager

#spring.datasource.external1.jdbcUrl=jdbc:mysql://192.168.150.67:3306/wedgemanager_ext?autoReconnect=true
#spring.datasource.external1.username=root
#spring.datasource.external1.password=root
#spring.datasource.external1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.external1.jndi-name=jdbc/wedgemanager

#JPA 설정
#Dialect 설정
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect
#하이버네이트가 실행하는 모든 SQL문을 콘솔로 출력해 준다.
spring.jpa.properties.hibernate.show_sql=true
#콘솔에 출력되는 JPA 실행 쿼리를 가독성있게 표현한다.
spring.jpa.properties.hibernate.format_sql=true
#디버깅이 용이하도록 SQL문 이외에 추가적인 정보를 출력해 준다.
spring.jpa.properties.hibernate.use_sql_comments=true
# ddl-auto - @Entity 테이블 정보를 실제 DB에 반영 할건지 설정(create/update/none..)
spring.jpa.properties.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.physical_naming_strategy=com.inswave.appplatform.strategy.CustomNamingStrategy
spring.jpa.properties.hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy


## 기타 설정
########################################################################################################################
# 에러페이지
#server.error.whitelabel.enabled=false

# .html suffix 설정
#spring.mvc.view.suffix=.html

# - jsp 페이지를 처리하기 위한 prefix와 suffix를 application.properties에 추가 하자.
# - 앞서 생성한 JSP 경로를 prefix로 선언, 그리고 확장자럴 suffix로 선언할 수 있다.
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

# jsp 기존 스프링과 동일하게 자동 반영하기 위해 설정을 추가
devtools.livereload.enabled=true
server.jsp-servlet.init-parameters.development=true

#오류 응답에 exception의 내용을 포함할지 여부 (TRUE, FALSE)
server.error.include-exception=TRUE
#오류 응답에 stacktrace 내용을 포함할지 여부 (ALWAYS, NEVER, ON_TRACE_PARAM)
server.error.include-stacktrace=ALWAYS

server.error.path=TRUE
#브라우저 요청에 대해 서버 오류시 기본으로 노출할 페이지를 사용할지 여부 (TRUE, FALSE)
server.error.whitelabel.enabled=TRUE

#JSP와 같이 사용할 경우 뷰 구분을 위해 컨트롤러가 뷰 이름을 반환할때 thymeleaf/ 로 시작하면 타임리프로 처리하도록 view-names 지정
spring.thymeleaf.view-names=thymeleaf/*
spring.thymeleaf.prefix=classpath:templates/
spring.thymeleaf.suffix=.html

# thymeleaf를 사용하다 수정 사항이 생길 때 수정을 하면 재시작을 해줘야 한다. 이를 무시하고 브라우저 새로고침시 수정사항 반영을 취해 cache=false 설정(운영시는 true)
spring.thymeleaf.cache=false
spring.thymeleaf.check-template-location=true


## jwt
########################################################################################################################
wedgemanager.jwt.tokenValidityInMilliseconds=86400000
wedgemanager.jwt.secret=wedgemanagerjwtsecretparsetargettobase64


## message and exception file
########################################################################################################################

# 디버깅 용도로 남긴다. 운영에 남길경우 일별 로그 관리 해야 함.
save.request.log.data=false
save.request.log.data.dir=C:/temp/
log.file.date.pattern=yyyyMMddHH

# exception 발생 메시지 저장
save.exception.log.data=false
save.exception.log.dir=C:/temp/exception/


## alert rule
########################################################################################################################
# 처리 인스턴스 여부
is.master.rule.processor=true
# master처리 후 slave의 check time (master에서 find후 delete까지 0.5초 소요됨)
# 아래 sleep time 내에 발생하는 건수는 체크하여 제외 시키다.
sleep.slave.rule.processor.ms=3000


## StartLogRuleSpringApplication 개발환경 실행을 위한 추가 (쓰이지 않음)
##XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# statistics daily log value
index.statistics.value=yyyyMMddHH

# log data saved day (make daily index and delete daily index)
index.dailylog.applicationerrorlog.saved.day=2
index.dailylog.clientactiveportlistresourcelog.saved.day=2
index.dailylog.clientcontrolprocessresourcelog.saved.day=2
index.dailylog.clientdefraganalysisresourcelog.saved.day=2
index.dailylog.clienthwinforesourcelog.saved.day=2
index.dailylog.clientmbrresourcelog.saved.day=2
index.dailylog.clientperformancelog.saved.day=2
index.dailylog.clientprocesscreationlog.saved.day=2
index.dailylog.clientprocessresourcelog.saved.day=2
index.dailylog.clientprogramlistresourcelog.saved.day=2
index.dailylog.clientusertermmonitorlog.saved.day=2
index.dailylog.clientwindowsupdatelistresourcelog.saved.day=2
index.dailylog.deviceerrorlog.saved.day=2
index.dailylog.hwerrorlog.saved.day=2
index.dailylog.integritylog.saved.day=2
index.dailylog.pconoffeventlog.saved.day=2
index.dailylog.serverresourcelog.saved.day=2
index.dailylog.modulemonitoringlog.saved.day=2
index.dailylog.windowsbluescreenlog.saved.day=2
index.dailylog.windowseventsystemerroralllog.saved.day=2
index.dailylog.rulealertlog.saved.day=2
index.dailylog.rulealertsendlog.saved.day=2

index.dailylog.applicationerrorlog.index.name=applicationerrorlogdaily
index.dailylog.clientactiveportlistresourcelog.index.name=clientactiveportlistresourcelogdaily
index.dailylog.clientcontrolprocessresourcelog.index.name=clientcontrolprocessresourcelogdaily
index.dailylog.clientdefraganalysisresourcelog.index.name=clientdefraganalysisresourcelogdaily
index.dailylog.clienthwinforesourcelog.index.name=clienthwinforesourcelogdaily
index.dailylog.clientmbrresourcelog.index.name=clientmbrresourcelogdaily
index.dailylog.clientperformancelog.index.name=clientperformanceresourcelogdaily
index.dailylog.clientprocesscreationlog.index.name=clientprocesscreationlogdaily
index.dailylog.clientprocessresourcelog.index.name=clientprocessresourcelogdaily
index.dailylog.clientprogramlistresourcelog.index.name=clientprogramlistresourcelogdaily
index.dailylog.clientusertermmonitorlog.index.name=clientusertermmonitorlogdaily
index.dailylog.clientwindowsupdatelistresourcelog.index.name=clientwindowsupdatelistresourcelogdaily
index.dailylog.deviceerrorlog.index.name=deviceerrorlogdaily
index.dailylog.hwerrorlog.index.name=hwerrorlogdaily
index.dailylog.integritylog.index.name=integritylogdaily
index.dailylog.pconoffeventlog.index.name=pconoffeventlogdaily
index.dailylog.serverresourcelog.index.name=serverresourcelogdaily
index.dailylog.windowsbluescreenlog.index.name=windowsbluescreenlogdaily
index.dailylog.windowseventsystemerroralllog.index.name=windowseventsystemerroralllogdaily
index.dailylog.modulemonitoringlog.index.name=modulemonitoringlogdaily
index.dailylog.rulealertlog.index.name=rulealertlogdaily
index.dailylog.rulealertsendlog.index.name=rulealertsendlogdaily

# module monitoring 옵션 처리
is.use.module.monitoring=false

##XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

